####### test_sync.fg

# to run, launch server and two clients, 'A' and 'B'


import 'sync' # for host and port
import '../test_director'


director = [

    'run_tests' : function(self)

        self.crud()
        #self.large()
        #self.conflict()
        #self.many()

    end,

    #
    # test to create, rename, update, delete
    #

    'crud' : function(self)

        # create
        self.sync_direct('A',      'update', 'a.txt', '123')
        self.sync_direct('A',      'verify', 'a.txt', '123')
        self.sync_direct('server', 'verify', 'a.txt', '123')
        self.sync_direct('B',      'verify', 'a.txt', '123')
/*
        # rename
        self.sync_direct('A',      'rename', 'a.txt', nil, 'b.txt')
        self.sync_direct('A',      'verify', 'b.txt', '123')
        self.sync_direct('server', 'verify', 'b.txt', '123')
        self.sync_direct('B',      'verify', 'b.txt', '123')

        # update
        self.sync_direct('B',      'update', 'b.txt', '456')
        self.sync_direct('B',      'verify', 'b.txt', '456')
        self.sync_direct('server', 'verify', 'b.txt', '456')
        self.sync_direct('A',      'verify', 'b.txt', '456')

        #delete
        self.sync_direct('A',      'delete', 'b.txt')
        self.sync_direct('A',      'verify', 'b.txt')
        self.sync_direct('server', 'verify', 'b.txt')
        self.sync_direct('B',      'verify', 'b.txt')
*/
    end,

    'sync_direct' : function(self, whom, action, path, content, path2)

        title = action +' '+ path
        if path2 then
            title = title +' to '+ path2
        end

        self.direct(title, whom, action, ['path':path, 'content':content, 'path2':path2])

    end,


] + test_director


director.mesh = Mesh.init(director.id, host, port, [director])
director.mesh.connect()
