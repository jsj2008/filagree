import 'sync'

test_director = [

    'seq'   : 1,
    'moi'   : 'test_director',
    'queue' : [],
    'active': [],

    'connected' : function(self, peer)

        msg1 = ['event' : 'greet', 'from' : self.moi, 'files' : self.files]
        sys.send(peer, msg1)

    end,

    'messaged' : function(self, socket, msg4)

        sys.print('messaged ' + msg4)

        if (msg4.event == 'test') then
            sys.print('test ' + msg4.seq + ': ' + msg4.status)
            seq = ''+msg4.seq
            original_request = self.active[seq]
            self.active[seq] = nil
            if (msg4.status != 'pass') and (msg4.retry < 3) then
                msg4.retry = msg4.retry + 1
                sys.sleep(msg4.retry * 1000)
                self.queue = [msg4] + self.queue
            end
            self.dequeue()
            return
        end

        if msg4.event == 'greet' then
            self.server = socket
            self.run_tests()
        end

    end,

    'run_tests' : function(self)

        self.direct('xyz',    'update', 'a.txt', '123')
        self.direct('xyz',    'verify', 'a.txt', '123')
        self.direct('server', 'verify', 'a.txt', '123')

    end,

    'direct' : function(self, whom, action, path, content)

        msg5 = ['event'     : 'test',
                'action'    : action,
                'from'      : self.moi,
                'to'        : whom,
                'seq'       : self.seq,
                'path'      : path,
                'content'   : content]

        self.queue = self.queue + [msg5]
        self.dequeue()
        self.seq = self.seq + 1

    end,

    'dequeue' : function(self)

        sys.print('dq ' + self.queue.length +' '+ self.active.keys.length)
        if (not self.queue.length) or (self.active.keys.length) then
            return
        end

        msg4 = self.queue.remove()[0]
        self.active[''+msg4.seq] = msg4
        if self.active.keys.length != 1 then sys.exit(2) end
        sys.send(self.server, msg4)

    end,

]

sys.connect('127.0.0.1', port, test_director) # client connects to server
sys.loop()
