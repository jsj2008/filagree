####### test_sync.fg

# to run, launch server and two clients, 'client1' and 'client2'


import 'sync' # for host and port
import '../test_director'


director = [

    'run_tests' : function(self)

        #self.fiddle()
        
        self.crud()
        #self.large_file()
        self.conflict()

    end,

    'fiddle' : function(self)
        self.sync_direct('client1', 'update', 'a.txt', '123')
        self.sync_direct('client1', 'rename', 'a.txt', nil, 'b.txt')
    end,

    #
    # test to create, rename, update, delete
    #

    'crud' : function(self)

        # create
        self.sync_direct('client1', 'update', 'a.txt', '123')
        self.sync_direct('client1', 'verify', 'a.txt', '123')
        self.sync_direct('server1', 'verify', 'a.txt', '123')
        self.sync_direct('client2', 'verify', 'a.txt', '123')

        # rename
        self.sync_direct('client1', 'rename', 'a.txt', nil, 'b.txt')
        self.sync_direct('client1', 'verify', 'a.txt')
        self.sync_direct('server1', 'verify', 'a.txt')
        self.sync_direct('client2', 'verify', 'a.txt')
        self.sync_direct('client1', 'verify', 'b.txt', '123')
        self.sync_direct('server1', 'verify', 'b.txt', '123')
        self.sync_direct('client2', 'verify', 'b.txt', '123')

        # update
        self.sync_direct('client2', 'update', 'b.txt', '456')
        self.sync_direct('client2', 'verify', 'b.txt', '456')
        self.sync_direct('server1', 'verify', 'b.txt', '456')
        self.sync_direct('client1', 'verify', 'b.txt', '456')

        #delete
        self.sync_direct('client1', 'delete', 'b.txt')
        self.wait() # wait for delete to propogate
        self.sync_direct('client1', 'verify', 'b.txt')
        self.sync_direct('server1', 'verify', 'b.txt')
        self.sync_direct('client2', 'verify', 'b.txt')

    end,

    #
    # Sync & Conflict Resolution - Test Cases
    #

    'conflict' : function(self)

        # TC 1: Simple Edit – Variation 1
        self.sync_direct('server1', 'update', 'tc1.txt', 'tc1a')
        self.sync_direct('client1', 'verify', 'tc1.txt', 'tc1a')
        self.sync_direct('client1', 'update', 'tc1.txt', 'tc1b')
        self.sync_direct('client1', 'verify', 'tc1.txt', 'tc1b')
        self.sync_direct('server1', 'verify', 'tc1.txt', 'tc1b')

        # TC 2: Simple Edit – Variation 2
        self.create_file('client1', 'tc2', 1024)    # create file that take time to upload
        self.wait()                                 # wait for client to detect file, and start uploading
        self.create_file('client1', 'tc2', 1)       # overwrite with another file
        self.sync_direct('client1', 'verify', 'tc2', nil, nil, 1)
        self.sync_direct('client2', 'verify', 'tc2', nil, nil, 1)
        self.sync_direct('server1', 'verify', 'tc2', nil, nil, 1)

        # TC 3: Simple Edit – Variation 3
        self.sync_direct('client1', 'update', 'tc3.txt', '123')
        self.sync_direct('client1', 'verify', 'tc3.txt', '123')
        self.sync_direct('server1', 'verify', 'tc3.txt', '123')
        self.sync_direct('client1', 'offline')
        self.create_file('client1', 'tc3.txt', nil, '789')  # overwrite with another file while offline
        self.wait()                                         # catch file event before going back online
        self.sync_direct('client1', 'online')
        self.sync_direct('server1', 'verify', 'tc3.txt', '789')
/*
        # TC 4: Conflicted Edit – Variation 1
        self.sync_direct('client1', 'update', 'tc4.txt', '123')
        self.sync_direct('client1', 'offline')
        self.create_file('client1', 'tc4.txt', nil, '456')  # overwrite with another file while offline
        self.wait()                                         # ensure different timestamps
        self.create_file('server1', 'tc4.txt', nil, '789')  # out of band edit
        self.wait()                                         # ignore file event
        self.sync_direct('client1', 'online')
        self.sync_direct('server1', 'verify', 'tc3.txt', '789')
        self.sync_direct('server1', 'verify', 'tc3_conflict.txt', '456')
*/

    end,

    #
    # test to transfer large files
    #

    # todo: 1) dynamic chunk size in sync.fg, 2) reuse buffer in node.c, 3) staging area in sync.fg 

    'large_file' : function(self)

        test_xfer = function(self, size)

            dir = 'client1'
            filename = size + 'B'
            self.create_file(dir, filename, size)
            self.sync_direct('client1', 'verify', filename, nil, nil, size)
            self.sync_direct('server1', 'verify', filename, nil, nil, size)
            self.sync_direct('client2', 'verify', filename, nil, nil, size)

        end

        size = 1024 # bytes
        #while size <= (1024*1024) # 1MB
            test_xfer(self, size)
            size = size * 2
        #end

    end,

    #
    # test to create, rename, update, delete
    #

    'crud' : function(self)

        # create
        self.sync_direct('A',      'update', 'a.txt', '123')
        self.sync_direct('A',      'verify', 'a.txt', '123')
        self.sync_direct('server', 'verify', 'a.txt', '123')
        self.sync_direct('B',      'verify', 'a.txt', '123')

        # rename
        self.sync_direct('A',      'rename', 'a.txt', nil, 'b.txt')
        self.sync_direct('A',      'verify', 'b.txt', '123')
        self.sync_direct('server', 'verify', 'b.txt', '123')
        self.sync_direct('B',      'verify', 'b.txt', '123')

        # update
        self.sync_direct('B',      'update', 'b.txt', '456')
        self.sync_direct('B',      'verify', 'b.txt', '456')
        self.sync_direct('server', 'verify', 'b.txt', '456')
        self.sync_direct('A',      'verify', 'b.txt', '456')

        #delete
        self.sync_direct('A',      'delete', 'b.txt')
        self.sync_direct('A',      'verify', 'b.txt')
        self.sync_direct('server', 'verify', 'b.txt')
        self.sync_direct('B',      'verify', 'b.txt')

        # tell servers and client to exit
        self.direct(nil, 'A',      'die')
        self.direct(nil, 'B',      'die')
        self.direct(nil, 'server', 'die')

    end,

    # creates local file of random content, size in KB
    'create_file' : function(self, dir, name, size, content)
        if size then
            self.local_step('fork', true, '/bin/dd', 'if=/dev/urandom', 'bs=1', 'count=' + size, 'of=' + dir +'/'+ name)
        else if dir and name then
            self.local_step('write', dir +'/'+ name, content)
        else
            self.print('create_file usage error')
        end
    end,

    'wait' : function(self)
        self.local_step('wait')
    end,

    # perform a test step, instead of asking another client to
    'step' : function(self, params)
        self.mesh.print('step '   + params)

        action = params[0]

        if action == 'write' then # write contents to file
            sys.write(params[1], params[2])

        else if action == 'wait' then # wait so as to ignore file event
            sys.sleep(2000)
        end

    end,

    'sync_direct' : function(self, whom, action, path, content, path2, size)

        title = action +' '+ path
        if path2 then
            title = title +' to '+ path2
        end

        self.direct(title, whom, action, ['path':path, 'content':content, 'path2':path2, 'size':size])

    end,


] + test_director


mesh = Mesh.init(director.id, host, port, [director])
director.launch(mesh, 2)
