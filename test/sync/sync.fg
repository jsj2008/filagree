####### sync.fg

port = 9990
test_dir   = 'synctest/'


Sync = [

    'init' : function(self, ctx, watched)

        self = ['ctx' : ctx, 'watched' : watched] + self
        self.files = self.local_snapshot()
        if ctx and ctx.ui then
            sys.ui_set(ctx.ui.files, self.files.keys)     # update ui
        end
        return self

    end,

    'local_snapshot' : function(self)

        list = sys.file_list(self.watched) - self.watched
        normalized = [(f-self.watched):list[f] for f in list where not self.ignore(f)]
        return normalized

    end,

    'ignore' : function(self, path)

        i = path.find('/', -1) # get last path component
        return (i >= 0) and (path[i+1] == '.') # ignore .*

    end,

    'connected' : function(self, id)

        self.peer = id

        msg1 = ['event' : 'login', 'files' : self.files]
        sys.send(self.peer, msg1)

    end,

    'messaged' : function(self, id, msg4)

        sys.print('message from ' + id + ': ' + msg4)
        if msg4.event == 'content-request' then
            self.handle_content_request(id, msg4)
        else if msg4.event == 'login' then
            self.snapshot = msg4.files
        else if msg4.event == 'change' then
            self.handle_change(msg4.changes)
        else if msg4.event == 'content' then
            sys.write(self.watched + msg4.path, msg4.content)   # save file
            files = self.local_snapshot().keys
            if self.ctx.ui then
                sys.ui_set(self.ctx.ui.files, files)                # update ui
            end
        end

    end,

    'handle_content_request' : function(self, id, msg5)

        for path in msg5.paths

            fullpath = self.watched + path
            content = sys.read(fullpath)
            response = ['event' : 'content', 'path' : path, 'content' : content]
            sys.send(id, response)

        end
    end,

    'filed' : function(self, path)

        latest = self.local_snapshot()
        updated = latest - self.files
        deleted = self.files - latest
        for f in self.files
            g = self.files[f]
            mod = g.modified
            h = latest[f]
            if h and (mod != h.modified) then
                updated = updated + f:g
            end
        end
        changes = ['updated' : updated, 'deleted' : deleted]
        msg2 = ['event' : 'change', 'changes' : changes]
        filedd = self.peer
        sys.send(self.peer, msg2)
        self.files = latest

    end,

    'handle_change' : function(self, changez)

        cu = changez.updated
        cd = changez.deleted

        # create new directories
        for path in cu where cu[path].dir
            sys.mkdir(self.watched + path)
        end

        # delete removed directories and files
        for path in cd
            sys.remove(self.watched + path)
        end

        # request update file bodies
        self.snapshot = self.snapshot + cu - cd
        paths = [path for path in cu where not cu[path].dir]
        if paths.length then
            msg3 = ['event' : 'content-request', 'paths' : paths]
            sys.send(self.peer, msg3)
        end

    end    
]

sys.mkdir(test_dir)

empty = function(dir)
    sys.remove(dir)
    sys.mkdir(dir)
end
