####### sync.fg


import '../ui'
import '../mesh'


Sync = [

    'sending' : [],
    'offset'  : [],
    'writing' : [],

    'init' : function(self, view, dir, mesh)

        self.view = view
        self.mesh = mesh
        mesh.subscribe(self)

        # clear directory for testing
        sys.rm(dir)
        sys.mkdir(dir)

        self.watched = dir + '/'

        self.tmpdir = 'tmp/' + self.mesh.id +'/'
        sys.rm(self.tmpdir)
        sys.mkdir(self.tmpdir)

        self.files = self.local_snapshot()

        sys.file_listen(self.watched, self)   # listen for file changes
        return self

    end,

    'local_snapshot' : function(self)
        list = (sys.file_list(self.watched) or []) - self.watched   # remove root element
        return [(path - self.watched):attr for path,attr in list]   # make paths relative
    end,

    'greet' : function(self)
        return ['files' : self.files]
    end,

    # returns true if path should be ignored in file events
    'ignore' : function(self, path)
        slash = path.find('/', -1)                      # get last path component
        return (slash >= 0) and (path[slash+1] == '.')  # ignore files that match ".*"
    end,

    'handle_message' : function(self, socket, msgs4)

        self.mesh.print('sync handle_message ' + msgs4)
        event = msgs4.event

        if event == 'test' then
            self.handle_test(msgs4)

        else if event == 'greet' then
            self.handle_greet(msgs4)

        else if event == 'delete' then
            self.handle_delete(msgs4.deletes)

        else if event == 'content' then
            self.handle_content(msgs4)

        else if action = 'folder' then
            self.handle_folder(msgs4)
        end

    end,

    'handle_folder' : function(self, msgf)
            path = msgf.path
            #self.mesh.print('handle_folder ' + path)
            self.writing[path] = true
            sys.mkdir(self.watched + path)
            sys.mkdir(self.tmpdir + path)
    end,

    'handle_greet' : function(self, msgg)

        #self.mesh.print('handle_greet:' + msgg)
        if not msgg.files then return end

        for f in self.files - msgg.files
            self.send_file(f, msgg.from)
        end

    end,


    # handle incoming file (or piece thereof)
    'handle_content' : function(self, incoming)

        path = incoming.path
        tmppath = self.tmpdir + path
        size,mod = sys.file

        if (not incoming.offset) then sys.rm(tmppath) end
        if incoming.last then last = ' last' else last = '' end
        self.mesh.print('write ' + path +' @'+ incoming.offset + last)
        sys.write(tmppath, incoming.content, incoming.offset)

        if not incoming.last then  # more to come later
            return
        end

        fullpath = self.watched + path

        #self.mesh.print('moving ' + tmppath +' to '+ fullpath)
        self.writing[path] = true
        sys.mv(tmppath, fullpath, incoming.modified) # move from downloading directory to intended destination
        #self.mesh.print('moved')
        self.update_ui()

    end,


    # called when the OS detects a file change, sends out updates/deletes
    'filed' : function(self, dir)

        files = self.local_snapshot()   # map -- path:attributes
        updates = [path:attr for path,attr in files where (self.files[path].modified != attr.modified)]
        deletes = [f for f in (self.files - files) where not f.deleting]
/*
        self.mesh.print('filed files=' + self.files)
        self.mesh.print('filed ls=' + files)
        for path,attr in files where (self.files[path].modified != attr.modified)
            self.mesh.print('\t\tpath='+path)
            self.mesh.print('\t\tattr='+attr + ' , '+ self.files[path])
            self.mesh.print('\t\tmod='+attr.modified + ' , '+ self.files[path].modified)
        end
        self.mesh.print('filed d=' + deletes)
*/
        self.mesh.print('filed u=' + files)

        self.files = files

        for f,a in updates
            if self.writing[f] then
                self.writing[f] = nil
            else
                self.send_file(f,a)
            end
        end

        if deletes.length then
            #self.mesh.print('deletes='+deletes)
            msg2 = ['event' : 'delete', 'deletes' : deletes]
            self.mesh.broadcast(msg2)
        end

        self.update_ui()

    end,


    # send a file in chunks
    'send_file' : function(self, path, attr)

        self.mesh.print('send ' + path +' : '+ attr)

        if attr.dir then
            msg7 = ['event':'folder', 'path':path] + attr
            self.mesh.broadcast(msg7) # send to everyone
        end

        full_local_path = self.watched + path
        self.offset[path] = 0
        if self.sending[path] then return end
        self.sending[path] = true

        msg7 = ['event':'content', 'path':path] + attr

        chunk = 10000 # chunk size in number of bytes

        while true

            if (bytes = sys.read(full_local_path, self.offset[path], chunk)) # non-zero
                msg7.content = bytes
                msg7.offset = self.offset[path]
                msg7.last = (bytes.length < chunk) # eom
                self.offset[path] = self.offset[path] + bytes.length
                if msg7.last then last=' last '+bytes.length else last='' end
                self.mesh.print('send ' + path +' @'+ msg7.offset + last)
                self.mesh.broadcast(msg7) # send to everyone
            end

            if msg7.last then # last chunk
                self.offset[path] = self.sending[path] = nil
                return # exit from loop
            end
        end
    end,

    'handle_delete' : function(self, deletes)

        #self.mesh.print('handle_delete ' + deletes)

        # delete removed directories and files
        for path in deletes
            sys.rm(self.watched + path)
        end

    end,

    'update_ui' : function(self)
        if self.view then
            paths = self.files.keys
            self.view.update_view(paths)
        end
    end,

    ####### test

    'handle_test' : function(self, msg7)

        action = msg7.action
        path = self.watched + msg7.path
        status = 'done'

        # if not msg7.retry then self.mesh.print('test ' + msg7.seq  +': '+ msg7) end

        if action == 'update' then
            sys.write(path, msg7.content)

        else if action == 'rename' then
            size,mod = sys.fileattr(path)
            sys.mv(path, self.watched + msg7.path2, mod)

        else if action == 'delete' then
            sys.rm(self.watched + msg7.path)
            sys.rm(self.tmpdir + msg7.path)

        else if action == 'verify' then
            #self.mesh.print('verify ' + path)
            if msg7.size then
                match = msg7.size == sys.fileattr(path)
                #self.mesh.print('size match ' + sys.fileattr(path) +' => '+ match)
            else
                match = msg7.content == sys.read(path)
                #self.mesh.print('content match = ' + match)
            end

            if match then status='pass' else status='fail' end
            #self.mesh.print('match=' + match)

        else if action == 'folder' then
            sys.mkdir(self.watched + msg7.path)
            sys.mkdir(self.tmpdir + msg7.path)

        else if action == 'die' then
            sys.sleep(1000) # wait for broadcast to go out
            self.mesh.print('exiting')
            sys.exit(0)

        else
            status = 'fail: unknown action ' + action
        end

        #self.mesh.print('result for ' + action +': '+ status)

        msg8 = ['event' : 'test', 'status' : status, 'seq' : msg7.seq, 'to' : msg7.from]
        self.mesh.send_to(msg7.from, msg8)

    end
]