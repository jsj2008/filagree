####### mesh.fg

# default port is 1999  

Mesh = [


    'peers' : [], # maps id : socket
    'sreep' : [], # maps socket: id
    'seq'   : 0,
    'queue' : [],

    'init' : function(self, id, port, mesh_subscribers)

        self.id = id
        self.port = port or 1999
        self.ctx = mesh_subscribers or []

        return self

    end,

    'subscribe' : function(self, subscriber)
        self.ctx = self.ctx + [subscriber]
    end,

    'listen' : function(self)
        self.print('listening on port ' + self.port)
        sys.listen(self.port, self)    # server listens for incoming socket connections
    end,


    'connect' : function(self, host)
        sys.connect(host or '127.0.0.1', self.port, self)
    end,


    'send_greet' : function(self, socket)
        test = (socket.type == 'nil')
        msg1 = ['event' : 'greet', 'from' : self.id, 'test' : test]
        for c in self.ctx
            msg1 = msg1 + c.greet()
        end

        #self.print('socket.type='+socket.type+' test='+test)
        if test then
            #self.print('peers='+self.peers)
            for socket in self.peers.vals
                self.send(socket, msg1)
            end
        else
            self.send(socket, msg1)
        end
    end,


    'connected' : function(self, socket)
        self.send_greet(socket)
        for c in self.ctx
            c.connected(self, socket)
        end
    end,


    'disconnected' : function(self, socket)
        id = self.sreep[socket]
        self.handle_disconnect(id)
        self.peers[id] = self.sreep[socket] = nil

        self.print('disconnected from ' + id)

        for c in self.ctx
            c.disconnected(self, socket)
        end
    end,


    'handle_message' : function(self, socket, msg5)

        if msg5.event == 'greet' then
            self.print('connected to ' + msg5.from)
            self.peers[msg5.from] = socket
            self.sreep[socket] = msg5.from
            
            if msg5.test then self.connected(socket) end
        end
    end,


    'print' : function(self, line)
        sys.print('\t' + self.id +' -- '+ line)
    end,


    'messaged' : function(self, socket, msgm4)

                self.print('message from ' + msgm4.from + ': ' + msgm4)

        if (not msgm4.to) or (msgm4.to == self.id) # por moi

            # handle all messages from each sender in sequence
            from = msgm4.from
            if self.queue[from] then
                self.queue[from] = self.queue[from] + [msgm4]
                return
            end

            while (msgm4)

                if msgm4.flood then
                    self.broadcast(msgm4, socket)
                end

                if not (response = self.handle_message(socket, msgm4)) then
                    for c in self.ctx

                        response = c.handle_message(socket, msgm4)
                        self.print('handled')

                        if response then
                            mm2 = ['from' : self.id, 'seq' : msgm4.seq] + response
                            self.send_to(from, mm2)
                            return
                        end
                    end
                end
                self.print('loop0')
                msgm4 = self.queue[from].remove()[0]
                self.print('loop ' + msgm4)
            end
            self.queue[from] = nil

        else # forward to recipient

            to = self.peers[msgm4.to] # id -> socket
            if not to then
                sys.print('no peer ' + msgm4.to)
            else
                self.send(to, msgm4)
            end
        end
    end,


    'request' : function(self, to, msg)
        msg.seq = self.seq
        self.requests[self.seq] = msg
        self.send_to(to, msg)
    end,


    'send_to' : function(self, to, msg)

        msg.from = self.id
        msg.to = to
        to2 = self.peers[to] # id -> socket

        # if no direct connection, then send via 'server'
        if not to2 then
            if self.id != 'server1' then
                to2 = self.peers['server1']
            else
                sys.print('no peer ' + to)
            end
        end

        self.send(to2, msg)

    end,


    'send' : function(self, to, msg)
        sys.print(self.id + ' send to ' + to + ': ' + msg)
        sys.send(to, msg)
    end,


    'broadcast' : function(self, msg6, except)
        #self.print('broadcast ' + except)
        msg6.flood = true
        msg6.from = msg6.from or self.id
        for socket in self.peers.vals where (socket != except)
            self.send(socket, msg6)
        end
    end,
]
