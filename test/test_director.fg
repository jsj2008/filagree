####### test_director


import 'mesh'


test_director = [


    'id'    :       'test_director',
    'seq'   :       0,
    'queue' :       [],
    'active':       [],
    'descriptions': [],
    'score' :       0,
    'num_tests':    0,


    'handle_message' : function(self, socket, msg4)

        if (msg4.event == 'greet') then

            self.run_tests()
            self.dequeue()

        else if (msg4.event == 'test') then

            #sys.print('test result: ' + msg4)

            seq = ''+msg4.seq
            original_request = self.active[seq]
            self.active[seq] = nil

            ok = (msg4.status == 'done') or (msg4.status == 'pass')

            if (not ok) and (original_request.retry < 3) then # retry

                original_request.retry = original_request.retry + 1
                sys.sleep(original_request.retry * 1000)
                self.queue = [original_request] + self.queue # add back to head of q

            else
                self.received_result(msg4.seq, ok)
            end

            if self.dequeue() then # all tests done
                sys.print('\ntesting complete: ' + self.score +' / '+ self.num_tests +' passed\n')
                self.scythe()
                sys.exit()
            end

        end
    end,

    'received_result' : function(self, seq, ok)

        if ok then
            self.score = self.score + 1
            text = 'passed'
        else
            text = 'failed'
        end

        self.num_tests = self.num_tests + 1
        desc = self.descriptions[seq]
        sys.print(self.id + ' -- ' + seq +' '+ desc.who +' '+ desc.title +': '+ text)

    end,


    'direct' : function(self, title, whom, action, params)

        self.descriptions[self.seq] = ['title' : title, 'who' : whom]

        msg5 = ['event'     : 'test',
                'action'    : action,
                'from'      : self.id,
                'to'        : whom,
                'seq'       : self.seq
                ] + params

        sys.print('\ndirect ' + msg5 +'\n')


        self.queue = self.queue + [msg5]

        self.seq = self.seq + 1

    end,

    'local_step' : function(self)
        args = sys.args()
        sys.print('\nlocal_step ' + args.part(1) + '\n')
        self.direct(args[1], nil, args.part(1))
    end,


    'dequeue' : function(self)

        if self.active.keys.length then # busy
            sys.print('dq busy')
            return false
        else if (not self.queue.length) then # all done
            sys.print('dq done')
            return true
        end

        msg4 = self.queue.remove()[0]

        if not msg4.to then
            sys.print('dq fork')
            sys.forkexec(msg4.action.pack())
            self.dequeue() # proceed to next step
        else
            self.active[''+msg4.seq] = msg4
            if self.active.keys.length != 1 then
                sys.print('dq error: ' + self.active)
                sys.exit(2)
            end

            sys.print('dq send')
            self.mesh.send_to(msg4.to, msg4)
        end

    end,

    # fork-exec server and clients
    'launch' : function(self, mesh, num_clients)

        sys.print('launch server')
        sys.forkexec(false, '../../source/filagree', 'sync_server.fg')
        sys.sleep(1000)
/*
        i = 1
        while i <= num_clients
            sys.forkexec('../../source/filagree', 'sync_client.fg', 'id=' + i)
            i = i + 1
        end
*/
        sys.forkexec(false, '../../source/filagree', 'sync_client.fg', 'id=' + 1)
        sys.forkexec(false, '../../source/filagree', 'sync_client.fg', 'id=' + 2)
        sys.sleep(1000)

        self.mesh = mesh
        self.mesh.connect()

    end,

    # send message to peer to exit
    'scythe' : function(self)

        msgdie = ['event'   : 'test',
                'action'    : 'die',
                'from'      : self.id]

        self.mesh.broadcast(msgdie)

    end,

]
