####### test_director


import 'mesh'


test_director = [


    'id'    : 'test_director',
    'seq'   : 0,
    'queue' : [],
    'active': [],
    'passed': 0,


    'handle_message' : function(self, socket, msg4)

        if (msg4.event == 'greet') then

            self.run_tests()

        else if (msg4.event == 'test') then

            sys.print('test result: ' + msg4)
            #sys.print('test result: ' + msg4.seq + ': ' + msg4.status)

            seq = ''+msg4.seq
            original_request = self.active[seq]
            self.active[seq] = nil

            ok = (msg4.status == 'done') or (msg4.status == 'pass')
            self.passed = self.passed + ok
            self.tested = self.tested + 1

            if (not ok) and (original_request.retry < 3) then

                original_request.retry = original_request.retry + 1
                sys.sleep(original_request.retry * 1000)
                self.queue = [original_request] + self.queue

            end

            self.dequeue()

            if (msg4.seq == self.seq) then
                self.print_report()
            end

        end

    end,


    'direct' : function(self, whom, action, params)

        self.seq = self.seq + 1

        msg5 = ['event'     : 'test',
                'action'    : action,
                'from'      : self.id,
                'to'        : whom,
                'seq'       : self.seq] + params

        self.queue = self.queue + [msg5]
        self.dequeue()

    end,


    'print_report' : function(self)

        total = self.passed + self.tested
        sys.print('test complete: ' + self.passed +' / '+ self.tested +' passed')
        sys.exit()

    end,


    'dequeue' : function(self)

        if (not self.queue.length) or self.active.keys.length then # busy
            return
        end

        msg4 = self.queue.remove()[0]
        self.active[''+msg4.seq] = msg4
        if self.active.keys.length != 1 then
            sys.exit(2)
        end

        #sys.print('send ' + msg4)
        #sys.send(self.peers.server, msg4)
        self.mesh.send_to(msg4.to, msg4)

    end,

]
